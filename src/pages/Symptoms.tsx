import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Badge } from '@/components/ui/badge';
import { MoonPhase } from '@/components/ui/moon-phase';
import { useAuth } from '@/components/auth/AuthProvider';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { Heart, Brain, Zap, Moon } from 'lucide-react';

interface SymptomLog {
  energy: number;
  mood: string[];
  physical_symptoms: string[];
  sleep_quality: number;
  stress_level: number;
  wellness_index: number;
}

interface HistoryDay {
  date: string;
  wellness_index: number;
}

const Symptoms = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  
  const [currentLog, setCurrentLog] = useState<SymptomLog>({
    energy: 3,
    mood: [],
    physical_symptoms: [],
    sleep_quality: 3,
    stress_level: 3,
    wellness_index: 50
  });
  
  const [history, setHistory] = useState<HistoryDay[]>([]);
  const [loading, setLoading] = useState(false);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const physicalOptions = [
    { id: 'pain', label: 'ü§ï –ë–æ–ª—å', value: -15 },
    { id: 'fatigue', label: 'üò¥ –£—Å—Ç–∞–ª–æ—Å—Ç—å', value: -10 },
    { id: 'energy', label: 'üí™ –ë–æ–¥—Ä–æ—Å—Ç—å', value: 15 },
    { id: 'cramps', label: 'ü©π –°–ø–∞–∑–º—ã', value: -12 },
    { id: 'headache', label: 'ü§Ø –ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', value: -10 },
    { id: 'bloating', label: 'üéà –í–∑–¥—É—Ç–∏–µ', value: -8 }
  ];

  const moodOptions = [
    { id: 'happy', label: 'üòä –†–∞–¥–æ—Å—Ç—å', value: 20 },
    { id: 'calm', label: 'üßò –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', value: 15 },
    { id: 'anxious', label: 'üò∞ –¢—Ä–µ–≤–æ–≥–∞', value: -15 },
    { id: 'irritable', label: 'üò° –†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', value: -12 },
    { id: 'sad', label: 'üò¢ –ì—Ä—É—Å—Ç—å', value: -10 },
    { id: 'motivated', label: '‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', value: 18 }
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  useEffect(() => {
    loadHistory();
    loadTodayLog();
  }, [user]);

  const loadHistory = async () => {
    if (!user) return;
    
    const { data } = await supabase
      .from('symptom_logs')
      .select('date, wellness_index')
      .eq('user_id', user.id)
      .order('date', { ascending: false })
      .limit(7);

    if (data) {
      setHistory(data);
    }
  };

  const loadTodayLog = async () => {
    if (!user) return;
    
    const today = new Date().toISOString().split('T')[0];
    const { data } = await supabase
      .from('symptom_logs')
      .select('*')
      .eq('user_id', user.id)
      .eq('date', today)
      .maybeSingle();

    if (data) {
      setCurrentLog({
        energy: data.energy || 3,
        mood: data.mood || [],
        physical_symptoms: data.physical_symptoms || [],
        sleep_quality: data.sleep_quality || 3,
        stress_level: data.stress_level || 3,
        wellness_index: data.wellness_index || 50
      });
    }
  };

  // –†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è
  const calculateWellnessIndex = (log: SymptomLog) => {
    let score = 0;
    
    // –≠–Ω–µ—Ä–≥–∏—è (–≤–µ—Å 0.3)
    score += (log.energy / 5) * 30;
    
    // –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (–≤–µ—Å 0.2)
    score += (log.sleep_quality / 5) * 20;
    
    // –°—Ç—Ä–µ—Å—Å (–≤–µ—Å 0.2, –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
    score += ((6 - log.stress_level) / 5) * 20;
    
    // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–≤–µ—Å 0.15)
    const moodScore = log.mood.reduce((sum, moodId) => {
      const mood = moodOptions.find(m => m.id === moodId);
      return sum + (mood?.value || 0);
    }, 0);
    score += Math.max(-15, Math.min(15, moodScore));
    
    // –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã (–≤–µ—Å 0.15)
    const physicalScore = log.physical_symptoms.reduce((sum, symptomId) => {
      const symptom = physicalOptions.find(s => s.id === symptomId);
      return sum + (symptom?.value || 0);
    }, 0);
    score += Math.max(-15, Math.min(15, physicalScore));
    
    return Math.max(0, Math.min(100, Math.round(score)));
  };

  const handleSave = async () => {
    if (!user) return;
    
    setLoading(true);
    const wellnessIndex = calculateWellnessIndex(currentLog);
    const today = new Date().toISOString().split('T')[0];
    
    try {
      const { error } = await supabase
        .from('symptom_logs')
        .upsert({
          user_id: user.id,
          date: today,
          energy: currentLog.energy,
          mood: currentLog.mood,
          physical_symptoms: currentLog.physical_symptoms,
          sleep_quality: currentLog.sleep_quality,
          stress_level: currentLog.stress_level,
          wellness_index: wellnessIndex
        }, {
          onConflict: 'user_id,date'
        });

      if (error) throw error;

      setCurrentLog({ ...currentLog, wellness_index: wellnessIndex });
      await loadHistory();
      
      toast({
        title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! ‚ú®',
        description: getFeedbackText(wellnessIndex),
      });
    } catch (error) {
      console.error('Error saving symptoms:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const getFeedbackText = (index: number) => {
    if (index <= 30) return '–û—Ç–¥–æ—Ö–Ω–∏ —Å–µ–≥–æ–¥–Ω—è üíß';
    if (index <= 60) return '–í—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ üòä';
    return '–¢—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ ‚ú®';
  };

  const getIndexColor = (index: number) => {
    if (index <= 30) return 'text-destructive';
    if (index <= 60) return 'text-yellow-500';
    return 'text-green-500';
  };

  const toggleSelection = (category: 'mood' | 'physical_symptoms', id: string) => {
    const current = currentLog[category];
    const updated = current.includes(id)
      ? current.filter(item => item !== id)
      : [...current, id];
    
    setCurrentLog({ ...currentLog, [category]: updated });
  };

  const wellnessIndex = calculateWellnessIndex(currentLog);

  return (
    <div className="container mx-auto p-4 max-w-2xl space-y-6">
      {/* –ò–Ω–¥–µ–∫—Å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è */}
      <Card className="border-border/50 shadow-[var(--shadow-soft)]">
        <CardHeader className="text-center">
          <CardTitle className="text-lg">–ò–Ω–¥–µ–∫—Å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col items-center space-y-4">
          <div className="relative w-40 h-40">
            <MoonPhase value={wellnessIndex} className="w-full h-full" />
            <div className="absolute inset-0 flex items-center justify-center">
              <span className={`text-4xl font-bold ${getIndexColor(wellnessIndex)} drop-shadow-lg`}>
                {wellnessIndex}
              </span>
            </div>
          </div>
          <p className="text-center text-muted-foreground">
            {getFeedbackText(wellnessIndex)}
          </p>
        </CardContent>
      </Card>

      {/* –í–∫–ª–∞–¥–∫–∏ —Å —Å–∏–º–ø—Ç–æ–º–∞–º–∏ */}
      <Card>
        <CardContent className="p-4">
          <Tabs defaultValue="physical" className="w-full">
            <TabsList className="grid w-full grid-cols-4 mb-6">
              <TabsTrigger value="physical">
                <Heart className="h-4 w-4" />
              </TabsTrigger>
              <TabsTrigger value="mood">
                <Brain className="h-4 w-4" />
              </TabsTrigger>
              <TabsTrigger value="energy">
                <Zap className="h-4 w-4" />
              </TabsTrigger>
              <TabsTrigger value="sleep">
                <Moon className="h-4 w-4" />
              </TabsTrigger>
            </TabsList>

            {/* –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã */}
            <TabsContent value="physical" className="space-y-4">
              <h3 className="font-medium text-sm">–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h3>
              <div className="flex flex-wrap gap-2">
                {physicalOptions.map(option => (
                  <Badge
                    key={option.id}
                    variant={currentLog.physical_symptoms.includes(option.id) ? 'default' : 'outline'}
                    className="cursor-pointer transition-all hover:scale-105"
                    onClick={() => toggleSelection('physical_symptoms', option.id)}
                  >
                    {option.label}
                  </Badge>
                ))}
              </div>
            </TabsContent>

            {/* –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ */}
            <TabsContent value="mood" className="space-y-4">
              <h3 className="font-medium text-sm">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</h3>
              <div className="flex flex-wrap gap-2">
                {moodOptions.map(option => (
                  <Badge
                    key={option.id}
                    variant={currentLog.mood.includes(option.id) ? 'default' : 'outline'}
                    className="cursor-pointer transition-all hover:scale-105"
                    onClick={() => toggleSelection('mood', option.id)}
                  >
                    {option.label}
                  </Badge>
                ))}
              </div>
            </TabsContent>

            {/* –≠–Ω–µ—Ä–≥–∏—è */}
            <TabsContent value="energy" className="space-y-4">
              <h3 className="font-medium text-sm">–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏: {currentLog.energy}/5</h3>
              <Slider
                value={[currentLog.energy]}
                onValueChange={([value]) => setCurrentLog({ ...currentLog, energy: value })}
                min={1}
                max={5}
                step={1}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>–ù–∏–∑–∫–∏–π</span>
                <span>–í—ã—Å–æ–∫–∏–π</span>
              </div>
            </TabsContent>

            {/* –°–æ–Ω –∏ —Å—Ç—Ä–µ—Å—Å */}
            <TabsContent value="sleep" className="space-y-6">
              <div className="space-y-4">
                <h3 className="font-medium text-sm">–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {currentLog.sleep_quality}/5</h3>
                <Slider
                  value={[currentLog.sleep_quality]}
                  onValueChange={([value]) => setCurrentLog({ ...currentLog, sleep_quality: value })}
                  min={1}
                  max={5}
                  step={1}
                  className="w-full"
                />
              </div>
              
              <div className="space-y-4">
                <h3 className="font-medium text-sm">–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {currentLog.stress_level}/5</h3>
                <Slider
                  value={[currentLog.stress_level]}
                  onValueChange={([value]) => setCurrentLog({ ...currentLog, stress_level: value })}
                  min={1}
                  max={5}
                  step={1}
                  className="w-full"
                />
              </div>
            </TabsContent>
          </Tabs>

          <Button 
            onClick={handleSave} 
            disabled={loading}
            className="w-full mt-6"
          >
            {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </Button>
        </CardContent>
      </Card>

      {/* –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 7 –¥–Ω–µ–π */}
      {history.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">–ò—Å—Ç–æ—Ä–∏—è (7 –¥–Ω–µ–π)</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex justify-between gap-2">
              {history.reverse().map((day) => {
                const date = new Date(day.date);
                const dayName = date.toLocaleDateString('ru-RU', { weekday: 'short' });
                
                return (
                  <div key={day.date} className="flex flex-col items-center gap-2">
                    <span className="text-xs text-muted-foreground">{dayName}</span>
                    <div 
                      className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold ${
                        day.wellness_index <= 30 ? 'bg-destructive/20 text-destructive' :
                        day.wellness_index <= 60 ? 'bg-yellow-500/20 text-yellow-600' :
                        'bg-green-500/20 text-green-600'
                      }`}
                    >
                      {day.wellness_index}
                    </div>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default Symptoms;
