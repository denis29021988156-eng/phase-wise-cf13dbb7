import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    console.log('Starting period notification check...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ü–∏–∫–ª–µ
    const { data: cycles, error: cyclesError } = await supabaseAdmin
      .from('user_cycles')
      .select('user_id, start_date, cycle_length');

    if (cyclesError) {
      console.error('Error fetching cycles:', cyclesError);
      throw cyclesError;
    }

    if (!cycles || cycles.length === 0) {
      console.log('No user cycles found');
      return new Response(
        JSON.stringify({ message: 'No cycles to check', processed: 0 }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log(`Found ${cycles.length} users with cycle data`);

    const today = new Date();
    today.setHours(0, 0, 0, 0);
    let notificationsCreated = 0;

    for (const cycle of cycles) {
      try {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏
        const startDate = new Date(cycle.start_date);
        const daysSinceStart = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
        const cycleDay = (daysSinceStart % cycle.cycle_length) + 1;
        
        // –î–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏
        const daysUntilNext = cycle.cycle_length - cycleDay + 1;
        
        // –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏
        const nextPeriodDate = new Date(today);
        nextPeriodDate.setDate(today.getDate() + daysUntilNext);
        const nextPeriodDateStr = nextPeriodDate.toISOString().split('T')[0];

        console.log(`User ${cycle.user_id}: ${daysUntilNext} days until next period`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∑–∞ 5, 3 –∏–ª–∏ 1 –¥–µ–Ω—å)
        const notificationDays = [5, 3, 1];
        
        for (const daysBefore of notificationDays) {
          if (daysUntilNext === daysBefore) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const { data: existingNotification } = await supabaseAdmin
              .from('notifications')
              .select('id')
              .eq('user_id', cycle.user_id)
              .eq('notification_type', 'period_reminder')
              .eq('scheduled_for', nextPeriodDateStr)
              .maybeSingle();

            if (!existingNotification) {
              // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              const messages: Record<number, { title: string; message: string }> = {
                5: {
                  title: 'üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏',
                  message: `–ß–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ü–∏–∫–ª. –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è.`
                },
                3: {
                  title: 'üå∏ –°–∫–æ—Ä–æ –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞',
                  message: `–ß–µ—Ä–µ–∑ 3 –¥–Ω—è –Ω–∞—á–Ω–µ—Ç—Å—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —É –≤–∞—Å –ø–æ–¥ —Ä—É–∫–æ–π.`
                },
                1: {
                  title: 'üí´ –ó–∞–≤—Ç—Ä–∞ –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞',
                  message: `–ó–∞–≤—Ç—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è. –ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ –∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–ª.`
                }
              };

              const notificationData = messages[daysBefore];

              const { error: insertError } = await supabaseAdmin
                .from('notifications')
                .insert({
                  user_id: cycle.user_id,
                  notification_type: 'period_reminder',
                  title: notificationData.title,
                  message: notificationData.message,
                  scheduled_for: today.toISOString().split('T')[0],
                  sent_at: new Date().toISOString()
                });

              if (insertError) {
                console.error(`Error creating notification for user ${cycle.user_id}:`, insertError);
              } else {
                console.log(`Created ${daysBefore}-day notification for user ${cycle.user_id}`);
                notificationsCreated++;
              }
            } else {
              console.log(`Notification already exists for user ${cycle.user_id} (${daysBefore} days)`);
            }
          }
        }
      } catch (error) {
        console.error(`Error processing cycle for user ${cycle.user_id}:`, error);
      }
    }

    console.log(`Completed. Created ${notificationsCreated} notifications`);

    return new Response(
      JSON.stringify({ 
        message: 'Period notifications check completed',
        usersChecked: cycles.length,
        notificationsCreated
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error in check-period-notifications:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});