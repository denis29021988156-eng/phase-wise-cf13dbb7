import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
    );

    // Webhook –æ—Ç Gmail/Outlook —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–æ–≤–æ–º –ø–∏—Å—å–º–µ
    const { threadId, emailBody, userId } = await req.json();

    console.log('Processing email reply for thread:', threadId);

    // –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ thread ID
    const { data: suggestion, error: suggestionError } = await supabaseClient
      .from('event_move_suggestions')
      .select(`
        *,
        events (*)
      `)
      .eq('email_thread_id', threadId)
      .eq('status', 'email_sent')
      .single();

    if (suggestionError || !suggestion) {
      console.log('No pending suggestion found for thread:', threadId);
      return new Response(
        JSON.stringify({ success: false, message: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    
    const aiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { 
            role: 'system', 
            content: '–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤—Å—Ç—Ä–µ—á–∏. –û–ø—Ä–µ–¥–µ–ª–∏: —á–µ–ª–æ–≤–µ–∫ —Å–æ–≥–ª–∞—Å–µ–Ω, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω, –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON.' 
          },
          { 
            role: 'user', 
            content: `–ü–∏—Å—å–º–æ: "${emailBody}"\n\n–û—Ç–≤–µ—Ç—å –≤ JSON:\n{"accepted": true/false, "alternative_suggested": true/false, "alternative_time": "–µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ, —Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM"}` 
          }
        ],
        temperature: 0.3,
        max_tokens: 150,
      }),
    });

    if (!aiResponse.ok) {
      throw new Error('AI analysis failed');
    }

    const aiData = await aiResponse.json();
    const analysis = JSON.parse(aiData.choices[0].message.content);

    let newStatus = 'completed';
    let chatMessage = '';
    let updateEvent = false;
    let newStartTime = suggestion.suggested_new_start;
    let newEndTime = suggestion.suggested_new_end;

    if (analysis.accepted) {
      chatMessage = `‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å! –í—Å—Ç—Ä–µ—á–∞ "${suggestion.events.title}" –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ ${new Date(suggestion.suggested_new_start).toLocaleString('ru-RU')}`;
      updateEvent = true;
    } else if (analysis.alternative_suggested && analysis.alternative_time) {
      const altDate = new Date(analysis.alternative_time);
      const duration = new Date(suggestion.events.end_time).getTime() - new Date(suggestion.events.start_time).getTime();
      newStartTime = altDate.toISOString();
      newEndTime = new Date(altDate.getTime() + duration).toISOString();
      chatMessage = `üîÑ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è: ${altDate.toLocaleString('ru-RU')}. –ü–µ—Ä–µ–Ω–æ—à—É –≤—Å—Ç—Ä–µ—á—É.`;
      updateEvent = true;
    } else {
      chatMessage = `‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É "${suggestion.events.title}". –û—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å.`;
      newStatus = 'rejected';
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (updateEvent) {
      const event = suggestion.events;
      
      // –û–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î
      await supabaseClient
        .from('events')
        .update({
          start_time: newStartTime,
          end_time: newEndTime,
        })
        .eq('id', event.id);

      // –û–±–Ω–æ–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (Google/Outlook)
      if (event.source === 'google' && event.google_event_id) {
        await supabaseClient.functions.invoke('update-google-event', {
          body: {
            userId: suggestion.user_id,
            eventId: event.id,
            eventData: {
              title: event.title,
              startTime: newStartTime,
              endTime: newEndTime,
            }
          }
        });
      } else if (event.source === 'outlook') {
        await supabaseClient.functions.invoke('update-outlook-event', {
          body: {
            userId: suggestion.user_id,
            eventId: event.id,
            eventData: {
              title: event.title,
              startTime: newStartTime,
              endTime: newEndTime,
            }
          }
        });
      }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    await supabaseClient
      .from('event_move_suggestions')
      .update({ status: newStatus })
      .eq('id', suggestion.id);

    // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await supabaseClient
      .from('chat_messages')
      .insert({
        user_id: suggestion.user_id,
        role: 'assistant',
        content: chatMessage
      });

    console.log(`Email reply processed for suggestion ${suggestion.id}:`, newStatus);

    return new Response(
      JSON.stringify({ 
        success: true,
        message: '–û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
        status: newStatus
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('Error in ai-handle-email-reply:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Unknown error',
        success: false
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
