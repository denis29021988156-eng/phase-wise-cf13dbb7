import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
const getCyclePhase = (cycleDay: number, cycleLength: number = 28) => {
  if (cycleDay >= 1 && cycleDay <= 5) {
    return {
      phase: '–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è',
      description: '—Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥—ã—Ö–µ, –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–æ–ª–µ–≤—ã–µ –æ—â—É—â–µ–Ω–∏—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    };
  } else if (cycleDay >= 6 && cycleDay <= 13) {
    return {
      phase: '–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞',
      description: '–ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ö–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'
    };
  } else if (cycleDay >= 14 && cycleDay <= 16) {
    return {
      phase: '–û–≤—É–ª—è—Ü–∏—è',
      description: '–ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω—ã —Ç—è–Ω—É—â–∏–µ –±–æ–ª–∏'
    };
  } else {
    return {
      phase: '–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞',
      description: '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –≤–æ–∑–º–æ–∂–Ω–∞—è —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–æ–º—Ñ–æ—Ä—Ç–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–ø–ø–µ—Ç–∏—Ç–∞'
    };
  }
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!openAIApiKey) {
      throw new Error('OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    const { message, userId } = await req.json();

    console.log('Processing AI chat message for user:', userId);
    console.log('User message:', message);

    // Get user cycle data for personalized response
    let cycleContext = '';
    try {
      const { data: cycleData } = await supabaseClient
        .from('user_cycles')
        .select('*')
        .eq('user_id', userId)
        .maybeSingle();

      if (cycleData) {
        const today = new Date();
        const startDate = new Date(cycleData.start_date);
        const diffInDays = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
        const cycleDay = ((diffInDays % cycleData.cycle_length) + 1);
        const adjustedCycleDay = cycleDay > 0 ? cycleDay : cycleData.cycle_length + cycleDay;
        
        const { phase, description } = getCyclePhase(adjustedCycleDay, cycleData.cycle_length);
        
        cycleContext = `
–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –°–µ–≥–æ–¥–Ω—è ${adjustedCycleDay}-–π –¥–µ–Ω—å –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–∏–∑ ${cycleData.cycle_length} –¥–Ω–µ–π)
- –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: ${phase}
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–∞–∑—ã: ${description}
`;
      }
    } catch (error) {
      console.log('No cycle data found for user, proceeding without cycle context');
    }

    const systemPrompt = `
–ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≤–∞, –∏ —è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–µ–Ω—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é. 
–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è, –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Ç–µ–±–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

${cycleContext}

–ú–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
1. –Ø –æ–±—Ä–∞—â–∞—é—Å—å –∫ —Ç–µ–±–µ –Ω–∞ "—Ç—ã", –ª–∞—Å–∫–æ–≤–æ –∏ —Å –∑–∞–±–æ—Ç–æ–π
2. –ò–Ω–æ–≥–¥–∞ –Ω–∞–∑—ã–≤–∞—é —Ç–µ–±—è "–¥–æ—Ä–æ–≥–∞—è", —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Ç–µ–ø–ª–æ—Ç—É
3. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è—é —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è –≤ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã  
4. –î–∞—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –Ω–æ –º—è–≥–∫–∏–µ —Å–æ–≤–µ—Ç—ã —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ç–≤–æ–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
5. –£—á–∏—Ç—ã–≤–∞—é —Ç–≤–æ–π –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö (–µ—Å–ª–∏ –∑–Ω–∞—é –¥–∞–Ω–Ω—ã–µ)
6. –ù–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑—ã, –Ω–æ —Å –ª—é–±–æ–≤—å—é –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –≤—Ä–∞—á–æ–º
7. –§–æ–∫—É—Å–∏—Ä—É—é—Å—å –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ –∫ —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é
8. –û—Ç–≤–µ—á–∞—é –∫—Ä–∞—Ç–∫–æ, –Ω–æ —Ç–µ–ø–ª–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)

–¢–µ–º—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ, –¥–æ—Ä–æ–≥–∞—è:
- –¢–≤–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
- –ü–∏—Ç–∞–Ω–∏–µ –∏ –∑–∞–±–æ—Ç–∞ –æ —Ç–µ–ª–µ
- –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –°–æ–Ω –∏ –æ—Ç–¥—ã—Ö
- –°—Ç—Ä–µ—Å—Å –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ª —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–µ–≥–æ —Ü–∏–∫–ª–∞
- –õ—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∂–µ–Ω—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ

–ü–æ–º–Ω–∏, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π! üíô
`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        temperature: 0.7,
        max_tokens: 500
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('OpenAI API error:', errorData);
      throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    console.log('Generated AI response:', aiResponse);

    return new Response(
      JSON.stringify({ 
        response: aiResponse,
        success: true
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error in ai-chat function:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});