import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { checkRateLimit, rateLimitHeaders } from '../_shared/rate-limiter.ts';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
const getCyclePhase = (cycleDay: number, cycleLength: number = 28) => {
  if (cycleDay >= 1 && cycleDay <= 5) {
    return {
      phase: '–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è',
      description: '—Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥—ã—Ö–µ, –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–æ–ª–µ–≤—ã–µ –æ—â—É—â–µ–Ω–∏—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    };
  } else if (cycleDay >= 6 && cycleDay <= 13) {
    return {
      phase: '–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞',
      description: '–ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ö–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'
    };
  } else if (cycleDay >= 14 && cycleDay <= 16) {
    return {
      phase: '–û–≤—É–ª—è—Ü–∏—è',
      description: '–ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω—ã —Ç—è–Ω—É—â–∏–µ –±–æ–ª–∏'
    };
  } else {
    return {
      phase: '–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞',
      description: '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –≤–æ–∑–º–æ–∂–Ω–∞—è —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–æ–º—Ñ–æ—Ä—Ç–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–ø–ø–µ—Ç–∏—Ç–∞'
    };
  }
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!openAIApiKey) {
      throw new Error('OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    const { message, userId, language = 'ru' } = await req.json();

    console.log('Processing AI chat message for user:', userId);
    console.log('User message:', message);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit
    const rateLimit = await checkRateLimit(supabaseClient, userId, 'ai-chat');
    
    if (!rateLimit.allowed) {
      return new Response(
        JSON.stringify({ 
          error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.',
          response: '–ü—Ä–æ—Å—Ç–∏, –¥–æ—Ä–æ–≥–∞—è, –Ω–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º? üòä'
        }),
        {
          status: 429,
          headers: { 
            ...corsHeaders, 
            'Content-Type': 'application/json',
            ...rateLimitHeaders(rateLimit.remaining, rateLimit.resetAt)
          },
        }
      );
    }

    // Get or create user profile (with age, height, weight for personalized advice)
    let { data: profile } = await supabaseClient
      .from('user_profiles')
      .select('*')
      .eq('user_id', userId)
      .maybeSingle();

    if (!profile) {
      const { data: newProfile, error: profileError } = await supabaseClient
        .from('user_profiles')
        .insert({ user_id: userId })
        .select()
        .single();
      
      if (profileError) throw profileError;
      profile = newProfile;
    }

    // Build profile context for AI
    let profileContext = '';
    if (profile) {
      const profileParts = [];
      if (profile.name) profileParts.push(`–ò–º—è: ${profile.name}`);
      if (profile.age) profileParts.push(`–í–æ–∑—Ä–∞—Å—Ç: ${profile.age} –ª–µ—Ç`);
      if (profile.height) profileParts.push(`–†–æ—Å—Ç: ${profile.height} —Å–º`);
      if (profile.weight) profileParts.push(`–í–µ—Å: ${profile.weight} –∫–≥`);
      
      if (profileParts.length > 0) {
        profileContext = `\n\n–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n${profileParts.join('\n')}`;
      }
    }

    // Get conversation history (last 15 messages for context)
    const { data: chatHistory } = await supabaseClient
      .from('chat_messages')
      .select('role, content')
      .eq('user_id', userId)
      .order('created_at', { ascending: true })
      .limit(15);

    // Save user message
    await supabaseClient
      .from('chat_messages')
      .insert({
        user_id: userId,
        role: 'user',
        content: message
      });

    // Check if user mentioned their name in the message
    const nameMatch = message.match(/–º–µ–Ω—è –∑–æ–≤—É—Ç\s+(\w+)|—è\s+(\w+)(?:\s|$)|–∏–º—è\s+(\w+)/i);
    let userName = null;
    if (nameMatch) {
      userName = nameMatch[1] || nameMatch[2] || nameMatch[3];
    }

    // Get recent symptom logs for better health context
    const today = new Date().toISOString().split('T')[0];
    let symptomContext = '';
    
    try {
      const { data: todaySymptoms } = await supabaseClient
        .from('symptom_logs')
        .select('*')
        .eq('user_id', userId)
        .eq('date', today)
        .maybeSingle();

      const { data: recentSymptoms } = await supabaseClient
        .from('symptom_logs')
        .select('*')
        .eq('user_id', userId)
        .gte('date', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0])
        .order('date', { ascending: false })
        .limit(7);

      if (todaySymptoms) {
        const wellnessIndex = todaySymptoms.wellness_index || 50;
        const moodLabels: Record<string, string> = {
          happy: '—Ä–∞–¥–æ—Å—Ç—å', calm: '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', anxious: '—Ç—Ä–µ–≤–æ–≥–∞',
          irritable: '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', sad: '–≥—Ä—É—Å—Ç—å', motivated: '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ'
        };
        const physicalLabels: Record<string, string> = {
          pain: '–±–æ–ª—å', fatigue: '—É—Å—Ç–∞–ª–æ—Å—Ç—å', energy: '–±–æ–¥—Ä–æ—Å—Ç—å',
          cramps: '—Å–ø–∞–∑–º—ã', headache: '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', bloating: '–≤–∑–¥—É—Ç–∏–µ'
        };

        const moods = (todaySymptoms.mood || []).map((m: string) => moodLabels[m] || m);
        const symptoms = (todaySymptoms.physical_symptoms || []).map((s: string) => physicalLabels[s] || s);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –º–∏–Ω—É—Ç)
        const updatedAt = new Date(todaySymptoms.updated_at || todaySymptoms.created_at);
        const now = new Date();
        const minutesSinceUpdate = (now.getTime() - updatedAt.getTime()) / (1000 * 60);
        const isRecentlyUpdated = minutesSinceUpdate < 30;

        symptomContext = `
–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ${isRecentlyUpdated ? ' (üçé –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Apple Health)' : ''}:
- –ò–Ω–¥–µ–∫—Å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è: ${wellnessIndex}/100 ${wellnessIndex <= 30 ? '(–Ω–∏–∑–∫–∏–π - –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö)' : wellnessIndex <= 60 ? '(—Å—Ä–µ–¥–Ω–∏–π)' : '(–æ—Ç–ª–∏—á–Ω—ã–π)'}
- –≠–Ω–µ—Ä–≥–∏—è: ${todaySymptoms.energy}/5
${todaySymptoms.sleep_quality ? `- –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: ${todaySymptoms.sleep_quality}/5${isRecentlyUpdated ? ' (–∏–∑ Apple Health)' : ''}` : ''}
${todaySymptoms.stress_level ? `- –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${todaySymptoms.stress_level}/5${isRecentlyUpdated ? ' (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∏–∑ HRV Apple Health)' : ''}` : ''}
${moods.length > 0 ? `- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${moods.join(', ')}` : ''}
${symptoms.length > 0 ? `- –§–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è: ${symptoms.join(', ')}` : ''}
${todaySymptoms.weight ? `- –í–µ—Å: ${todaySymptoms.weight} –∫–≥` : ''}
${todaySymptoms.blood_pressure_systolic && todaySymptoms.blood_pressure_diastolic ? `- –î–∞–≤–ª–µ–Ω–∏–µ: ${todaySymptoms.blood_pressure_systolic}/${todaySymptoms.blood_pressure_diastolic} –º–º —Ä—Ç. —Å—Ç.` : ''}
${todaySymptoms.had_sex !== null && todaySymptoms.had_sex !== undefined ? `- –ü–æ–ª–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${todaySymptoms.had_sex ? '–î–∞' : '–ù–µ—Ç'}` : ''}

–í–ê–ñ–ù–û: –£—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –≤ —Å–≤–æ–∏—Ö —Å–æ–≤–µ—Ç–∞—Ö! –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–∏–∑–∫–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –±–æ–ª–µ–µ —â–∞–¥—è—â–∏–π —Ä–µ–∂–∏–º.
${isRecentlyUpdated ? '‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ –∏ —Å—Ç—Ä–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Apple Health - —ç—Ç–æ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å!' : ''}
`;
      }

      if (recentSymptoms && recentSymptoms.length > 1) {
        const avgIndex = Math.round(recentSymptoms.reduce((sum: number, log: any) => sum + (log.wellness_index || 50), 0) / recentSymptoms.length);
        symptomContext += `–°—Ä–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å –∑–∞ –Ω–µ–¥–µ–ª—é: ${avgIndex}/100\n`;
      }
    } catch (error) {
      console.log('No symptom data found, proceeding without symptom context');
    }

    // Get user cycle data for personalized response
    let cycleContext = '';
    try {
      const { data: cycleData } = await supabaseClient
        .from('user_cycles')
        .select('*')
        .eq('user_id', userId)
        .maybeSingle();

      if (cycleData) {
        const today = new Date();
        const startDate = new Date(cycleData.start_date);
        const diffInDays = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
        const cycleDay = ((diffInDays % cycleData.cycle_length) + 1);
        const adjustedCycleDay = cycleDay > 0 ? cycleDay : cycleData.cycle_length + cycleDay;
        
        const { phase, description } = getCyclePhase(adjustedCycleDay, cycleData.cycle_length);
        
        cycleContext = `
–ö–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:
- –°–µ–≥–æ–¥–Ω—è ${adjustedCycleDay}-–π –¥–µ–Ω—å –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–∏–∑ ${cycleData.cycle_length} –¥–Ω–µ–π)
- –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: ${phase}
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–∞–∑—ã: ${description}
`;
      }
    } catch (error) {
      console.log('No cycle data found for user, proceeding without cycle context');
    }

    // Get upcoming events from calendar
    let eventsContext = '';
    try {
      const sevenDaysFromNow = new Date();
      sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);
      
      const { data: upcomingEvents } = await supabaseClient
        .from('events')
        .select('*')
        .eq('user_id', userId)
        .gte('start_time', new Date().toISOString())
        .lte('start_time', sevenDaysFromNow.toISOString())
        .order('start_time', { ascending: true })
        .limit(10);

      if (upcomingEvents && upcomingEvents.length > 0) {
        const eventsList = upcomingEvents.map(event => {
          const startDate = new Date(event.start_time);
          const endDate = new Date(event.end_time);
          const dateStr = startDate.toLocaleDateString('ru-RU', { 
            weekday: 'long', 
            day: 'numeric', 
            month: 'long' 
          });
          const timeStr = `${startDate.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
          })} - ${endDate.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
          })}`;
          
          return `  ‚Ä¢ ${event.title} (${dateStr}, ${timeStr})`;
        }).join('\n');

        eventsContext = `
–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:
${eventsList}

–í–ê–ñ–ù–û: –£—á–∏—Ç—ã–≤–∞–π —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –¥–∞—á–µ —Å–æ–≤–µ—Ç–æ–≤! –ü—Ä–∏–Ω–∏–º–∞–π –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ:
- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π —Å —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–æ–π —Ü–∏–∫–ª–∞
- –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü—ã
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –≤–∞–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º (–æ—Ç–¥—ã—Ö –ø–µ—Ä–µ–¥ –Ω–∏–º–∏, –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ç.–¥.)
`;
      }
    } catch (error) {
      console.log('No calendar events found for user, proceeding without events context');
    }

    // Get recent Boost optimizations
    let boostContext = '';
    try {
      const threeDaysAgo = new Date();
      threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
      
      const { data: recentBoostActions } = await supabaseClient
        .from('event_actions')
        .select(`
          *,
          events (
            title
          )
        `)
        .eq('user_id', userId)
        .eq('action_type', 'boost_moved')
        .gte('created_at', threeDaysAgo.toISOString())
        .order('created_at', { ascending: false })
        .limit(5);

      if (recentBoostActions && recentBoostActions.length > 0) {
        const actionsList = recentBoostActions.map(action => {
          const oldDate = new Date(action.old_start_time!).toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'long' 
          });
          const newDate = new Date(action.new_start_time!).toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'long' 
          });
          const eventTitle = (action.events as any)?.title || '—Å–æ–±—ã—Ç–∏–µ';
          const energyBefore = action.metadata?.energy_before || '?';
          const energyAfter = action.metadata?.energy_after || '?';
          
          return `  ‚Ä¢ "${eventTitle}": –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å ${oldDate} (—ç–Ω–µ—Ä–≥–∏—è ${energyBefore}) –Ω–∞ ${newDate} (—ç–Ω–µ—Ä–≥–∏—è ${energyAfter})`;
        }).join('\n');

        boostContext = `
üî• –ù–µ–¥–∞–≤–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (Boost):
${actionsList}

–í–ê–ñ–ù–û: –≠—Ç–∏ —Å–æ–±—ã—Ç–∏—è –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —Å–∏—Å—Ç–µ–º–æ–π Boost –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
- –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç–∞—Ä—ã–µ –¥–∞—Ç—ã
- –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è, –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –æ–Ω–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è
- –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è, –Ω–æ –Ω–µ –æ—Ç–º–µ–Ω—è–π —É–∂–µ —Å–¥–µ–ª–∞–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
`;
      }
    } catch (error) {
      console.log('No Boost actions found, proceeding without Boost context');
    }

    // Build system prompt with user profile data
    const isEnglish = language === 'en';
    let systemPrompt = isEnglish 
      ? `You are Gaia, an advanced and caring virtual assistant for women's health with deep understanding of the menstrual cycle and women's overall well-being. Your main goal is to provide competent, detailed, and personalized recommendations based on the current cycle phase and the user's condition.

Your capabilities:
‚Ä¢ You have access to the user's Gmail and can check incoming emails with responses about event postponements
‚Ä¢ You can analyze the calendar and suggest optimal event rescheduling based on the menstrual cycle
‚Ä¢ You can draft and send emails to event participants suggesting postponements
‚Ä¢ You track the user's health and well-being based on symptom data

Communication rules:
‚Ä¢ Respond in English, using a simple and clear style, but maintain professional accuracy in details.
‚Ä¢ The tone should be friendly, caring, and supportive, showing empathy and respect.
‚Ä¢ Avoid highly specialized medical terminology ‚Äî explain necessary concepts in an accessible way for users without medical education.
‚Ä¢ Don't ask clarifying questions ‚Äî the user can't respond. Immediately provide useful information, assessments, and advice according to the request.
‚Ä¢ When the user asks to check email or send a message - inform that the system automatically checks Gmail every 5 minutes and processes responses. Suggest checking the "AI Monitoring" page to verify email processing status.

${cycleContext}

${symptomContext}

${eventsContext}

${boostContext}`
      : `–¢—ã ‚Äî Gaia, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–µ–Ω—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏ –æ–±—â–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –∂–µ–Ω—â–∏–Ω. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–µ, –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü—ã.

–¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –¢—ã –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø –∫ Gmail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü—ã –∏ –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å–æ–±—ã—Ç–∏–π
‚Ä¢ –¢—ã –º–æ–∂–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
‚Ä¢ –¢—ã –º–æ–∂–µ—à—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
‚Ä¢ –¢—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü—ã –ø–æ –¥–∞–Ω–Ω—ã–º —Å–∏–º–ø—Ç–æ–º–æ–≤

–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
‚Ä¢ –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –≤ –¥–µ—Ç–∞–ª—è—Ö.
‚Ä¢ –¢–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, —É—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º, –ø—Ä–æ—è–≤–ª—è–π —ç–º–ø–∞—Ç–∏—é –∏ —É–≤–∞–∂–µ–Ω–∏–µ.
‚Ä¢ –ò–∑–±–µ–≥–∞–π —É–∑–∫–æ—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ ‚Äî –æ–±—ä—è—Å–Ω—è–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–Ω—è—Ç–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü—ã –±–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
‚Ä¢ –ù–µ –∑–∞–¥–∞–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äì —É –Ω–µ—ë –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å. –°—Ä–∞–∑—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ü–µ–Ω–∫–∏ –∏ —Å–æ–≤–µ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–ø—Ä–æ—Å—É.
‚Ä¢ –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü–∞ –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ - —Å–æ–æ–±—â–∞–π, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç Gmail –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É "AI –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º.

${cycleContext}

${symptomContext}

${eventsContext}

${boostContext}`;

    // Add user profile data if available
    if (profile.age || profile.height || profile.weight) {
      systemPrompt += '\n\n–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n';
      if (profile.age) systemPrompt += `- –í–æ–∑—Ä–∞—Å—Ç: ${profile.age} –ª–µ—Ç\n`;
      if (profile.height) systemPrompt += `- –†–æ—Å—Ç: ${profile.height} —Å–º\n`;
      if (profile.weight) systemPrompt += `- –í–µ—Å: ${profile.weight} –∫–≥\n`;
      systemPrompt += '\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é, —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–±—â–µ–º—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é.\n';
    }

    systemPrompt += isEnglish 
      ? `
Reference (for you): Menstrual cycle phases and their typical impact on well-being:
‚Ä¢ Days 1‚Äì5 ‚Äì Menstruation: reduced energy, possible fatigue, painful sensations, increased need for rest.
‚Ä¢ Days 6‚Äì13 ‚Äì Follicular phase: gradual increase in energy, improved mood and concentration, feeling of inspiration.
‚Ä¢ Days 14‚Äì16 ‚Äì Ovulation: peak energy and endurance, high social activity, maximum concentration.
‚Ä¢ Days 17+ ‚Äì Luteal phase: gradual decrease in energy, possible mood swings, irritability, decreased concentration.`
      : `
–°–ø—Ä–∞–≤–∫–∞ (–¥–ª—è —Ç–µ–±—è): –§–∞–∑—ã –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏ –∏—Ö —Ç–∏–ø–∏—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ:
‚Ä¢ –î–Ω–∏ 1‚Äì5 ‚Äì –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: —Å–Ω–∏–∂–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è, –≤–æ–∑–º–æ–∂–Ω—ã —É—Å—Ç–∞–ª–æ—Å—Ç—å, –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥—ã—Ö–µ.
‚Ä¢ –î–Ω–∏ 6‚Äì13 ‚Äì –§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞: –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –ø–æ–¥—ä—ë–º —ç–Ω–µ—Ä–≥–∏–∏, —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏, —á—É–≤—Å—Ç–≤–æ –≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏—è.
‚Ä¢ –î–Ω–∏ 14‚Äì16 ‚Äì –û–≤—É–ª—è—Ü–∏—è: –ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è.
‚Ä¢ –î–Ω–∏ 17+ ‚Äì –õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞: –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –≤–æ–∑–º–æ–∂–Ω—ã –ø–µ—Ä–µ–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏.`;

    // Add name context
    if (profile.name) {
      systemPrompt += isEnglish
        ? `\n\nUser's name: ${profile.name}. Address them by name when giving important advice.`
        : `\n\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${profile.name}. –û–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –¥–∞–µ—à—å –≤–∞–∂–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.`;
    } else if (!chatHistory || chatHistory.length === 0) {
      systemPrompt += isEnglish
        ? `\n\nThis is the first interaction. Introduce yourself and gently ask their name to address them personally.`
        : `\n\n–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±—â–µ–Ω–∏–µ. –ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è –∏ –º—è–≥–∫–æ —Å–ø—Ä–æ—Å–∏ –∫–∞–∫ –∑–æ–≤—É—Ç, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∏–º–µ–Ω–∏.`;
    }

    systemPrompt += isEnglish
      ? `\n\nUse this information when formulating your response to make recommendations as accurate and useful as possible for the user.`
      : `\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü—ã.`;

    // Build messages array for OpenAI
    const messages = [{ role: 'system', content: systemPrompt }];

    // Add conversation history
    if (chatHistory && chatHistory.length > 0) {
      chatHistory.forEach(msg => {
        messages.push({ role: msg.role, content: msg.content });
      });
    }

    // Add current user message
    messages.push({ role: 'user', content: message });

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: messages,
        temperature: 0.7,
        max_tokens: 500
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('OpenAI API error:', errorData);
      throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    console.log('Generated AI response:', aiResponse);

    // Save AI response
    await supabaseClient
      .from('chat_messages')
      .insert({
        user_id: userId,
        role: 'assistant',
        content: aiResponse
      });

    // Update user name if detected
    if (userName && !profile.name) {
      await supabaseClient
        .from('user_profiles')
        .update({ name: userName })
        .eq('user_id', userId);
    }

    return new Response(
      JSON.stringify({ 
        response: aiResponse,
        success: true
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error in ai-chat function:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});