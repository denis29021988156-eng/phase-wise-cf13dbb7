import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.57.4';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Generate fast baseline predictions
const generateBaselinePredictions = (cycle: any) => {
  const today = new Date();
  const cycleStart = cycle?.start_date ? new Date(cycle.start_date) : today;
  const daysSinceStart = Math.floor((today.getTime() - cycleStart.getTime()) / (1000 * 60 * 60 * 24));
  
  return Array.from({ length: 30 }, (_, i) => {
    const cycleDay = ((daysSinceStart + i + 1) % (cycle?.cycle_length || 28)) + 1;
    let wellness = 50;
    let note = '';
    
    if (cycleDay <= (cycle?.menstrual_length || 5)) {
      wellness = 35 + Math.random() * 20; // 35-55
      note = '–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞';
    } else if (cycleDay <= 13) {
      wellness = 65 + Math.random() * 20; // 65-85
      note = '–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞: –≤—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è';
    } else if (cycleDay <= 15) {
      wellness = 80 + Math.random() * 15; // 80-95
      note = '–û–≤—É–ª—è—Ü–∏—è: –ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
    } else {
      wellness = 50 + Math.random() * 20; // 50-70
      note = '–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞: —É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
    }
    
    return {
      day: i + 1,
      wellness: Math.round(wellness),
      note
    };
  });
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    const authHeader = req.headers.get('Authorization')!;
    const token = authHeader.replace('Bearer ', '');
    const { data: { user } } = await supabase.auth.getUser(token);
    
    if (!user) {
      throw new Error('Not authenticated');
    }

    // Get cycle data quickly
    const { data: cycle } = await supabase
      .from('user_cycles')
      .select('start_date, cycle_length, menstrual_length')
      .eq('user_id', user.id)
      .single();

    // Return baseline predictions immediately
    const baselinePredictions = generateBaselinePredictions(cycle);
    
    // Start AI enhancement in background (don't await)
    if (openaiApiKey) {
      const enhanceInBackground = async () => {
        try {
          const { data: profile } = await supabase
            .from('user_profiles')
            .select('age, weight, height, language, timezone')
            .eq('user_id', user.id)
            .maybeSingle();

          const language = profile?.language || 'ru';
          const isEnglish = language === 'en';
          const timezone = profile?.timezone || 'UTC';

          // Get detailed symptom logs for last 30 days
          const { data: symptoms } = await supabase
            .from('symptom_logs')
            .select('date, wellness_index, energy, mood, sleep_quality, stress_level, physical_symptoms')
            .eq('user_id', user.id)
            .gte('date', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0])
            .order('date', { ascending: false })
            .limit(30);

          // Get recent chat messages for health context
          const { data: recentMessages } = await supabase
            .from('chat_messages')
            .select('content, created_at')
            .eq('user_id', user.id)
            .eq('role', 'user')
            .order('created_at', { ascending: false })
            .limit(10);

          // Get upcoming events for next 30 days
          const thirtyDaysFromNow = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();
          const { data: upcomingEvents } = await supabase
            .from('events')
            .select('title, start_time, end_time')
            .eq('user_id', user.id)
            .gte('start_time', new Date().toISOString())
            .lte('start_time', thirtyDaysFromNow)
            .order('start_time', { ascending: true });

          // Check if Apple Health data is synced
          const healthDataSynced = symptoms?.some(s => s.sleep_quality || s.stress_level) || false;

          // Build detailed symptom context
          const moodLabels: Record<string, Record<string, string>> = {
            en: {
              happy: 'joy', calm: 'calmness', anxious: 'anxiety',
              irritable: 'irritation', sad: 'sadness', motivated: 'motivation'
            },
            ru: {
              happy: '—Ä–∞–¥–æ—Å—Ç—å', calm: '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', anxious: '—Ç—Ä–µ–≤–æ–≥–∞',
              irritable: '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', sad: '–≥—Ä—É—Å—Ç—å', motivated: '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ'
            }
          };
          const physicalLabels: Record<string, Record<string, string>> = {
            en: {
              pain: 'pain', fatigue: 'fatigue', energy: 'energy',
              cramps: 'cramps', headache: 'headache', bloating: 'bloating'
            },
            ru: {
              pain: '–±–æ–ª—å', fatigue: '—É—Å—Ç–∞–ª–æ—Å—Ç—å', energy: '–±–æ–¥—Ä–æ—Å—Ç—å',
              cramps: '—Å–ø–∞–∑–º—ã', headache: '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', bloating: '–≤–∑–¥—É—Ç–∏–µ'
            }
          };
          
          const lang = isEnglish ? 'en' : 'ru';
          
          let symptomsContext = '';
          if (symptoms && symptoms.length > 0) {
            symptomsContext = isEnglish 
              ? '\nüìä RECENT WELLNESS DATA (last 30 days):\n'
              : '\nüìä –î–ê–ù–ù–´–ï –û –°–ê–ú–û–ß–£–í–°–¢–í–ò–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):\n';
            
            symptoms.slice(0, 10).forEach(s => {
              symptomsContext += `${s.date}: `;
              symptomsContext += isEnglish 
                ? `wellness=${s.wellness_index}/100, energy=${s.energy}/5`
                : `—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ=${s.wellness_index}/100, —ç–Ω–µ—Ä–≥–∏—è=${s.energy}/5`;
              
              if (s.sleep_quality) {
                symptomsContext += isEnglish 
                  ? `, sleep=${s.sleep_quality}/5`
                  : `, —Å–æ–Ω=${s.sleep_quality}/5`;
              }
              if (s.stress_level) {
                symptomsContext += isEnglish 
                  ? `, stress=${s.stress_level}/5`
                  : `, —Å—Ç—Ä–µ—Å—Å=${s.stress_level}/5`;
              }
              if (s.mood && s.mood.length > 0) {
                symptomsContext += isEnglish 
                  ? `, mood: ${s.mood.map((m: string) => moodLabels[lang][m] || m).join(', ')}`
                  : `, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${s.mood.map((m: string) => moodLabels[lang][m] || m).join(', ')}`;
              }
              if (s.physical_symptoms && s.physical_symptoms.length > 0) {
                symptomsContext += isEnglish 
                  ? `, symptoms: ${s.physical_symptoms.map((p: string) => physicalLabels[lang][p] || p).join(', ')}`
                  : `, —Å–∏–º–ø—Ç–æ–º—ã: ${s.physical_symptoms.map((p: string) => physicalLabels[lang][p] || p).join(', ')}`;
              }
              symptomsContext += '\n';
            });

            if (healthDataSynced) {
              symptomsContext += isEnglish
                ? '\nüçé Sleep and stress data synced from Apple Health\n'
                : '\nüçé –î–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ –∏ —Å—Ç—Ä–µ—Å—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Apple Health\n';
            }
          }

          // Add chat context
          let chatContext = '';
          if (recentMessages && recentMessages.length > 0) {
            const healthKeywords = isEnglish
              ? ['sick', 'hurts', 'tired', 'bad', 'pain', 'unwell', 'headache', 'back', 'stomach', 'nausea', 'weakness']
              : ['–±–æ–ª–µ—é', '–±–æ–ª–∏—Ç', '—É—Å—Ç–∞–ª–∞', '–ø–ª–æ—Ö–æ', '–±–æ–ª—å–Ω–æ', '–Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ', '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', '—Å–ø–∏–Ω–∞', '–∂–∏–≤–æ—Ç', '—Ç–æ—à–Ω–∏—Ç', '—Å–ª–∞–±–æ—Å—Ç—å'];
            const relevantMessages = recentMessages.filter(msg => 
              healthKeywords.some(keyword => msg.content.toLowerCase().includes(keyword))
            );
            
            if (relevantMessages.length > 0) {
              chatContext = isEnglish
                ? `\nüí¨ Health-related messages from chat:\n${relevantMessages.map(msg => `- ${msg.content}`).join('\n')}\n`
                : `\nüí¨ –°–æ–æ–±—â–µ–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏–∑ —á–∞—Ç–∞:\n${relevantMessages.map(msg => `- ${msg.content}`).join('\n')}\n`;
            }
          }

          // Add events context
          let eventsContext = '';
          if (upcomingEvents && upcomingEvents.length > 0) {
            eventsContext = isEnglish
              ? `\nüìÖ UPCOMING EVENTS (next 30 days):\n${upcomingEvents.slice(0, 15).map(e => {
                  const eventDate = new Date(e.start_time);
                  const dateStr = eventDate.toLocaleDateString(isEnglish ? 'en-US' : 'ru-RU', { timeZone: timezone });
                  const timeStr = eventDate.toLocaleTimeString(isEnglish ? 'en-US' : 'ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit',
                    timeZone: timezone 
                  });
                  return `${dateStr} ${timeStr}: ${e.title}`;
                }).join('\n')}\n`
              : `\nüìÖ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –°–û–ë–´–¢–ò–Ø (–±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π):\n${upcomingEvents.slice(0, 15).map(e => {
                  const eventDate = new Date(e.start_time);
                  const dateStr = eventDate.toLocaleDateString('ru-RU', { timeZone: timezone });
                  const timeStr = eventDate.toLocaleTimeString('ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit',
                    timeZone: timezone 
                  });
                  return `${dateStr} ${timeStr}: ${e.title}`;
                }).join('\n')}\n`;
          }

          // Build profile context for more personalized predictions
          let profileInfo = '';
          if (profile) {
            const parts = [];
            if (isEnglish) {
              if (profile.age) parts.push(`Age: ${profile.age} years`);
              if (profile.height) parts.push(`Height: ${profile.height} cm`);
              if (profile.weight) parts.push(`Weight: ${profile.weight} kg`);
            } else {
              if (profile.age) parts.push(`–í–æ–∑—Ä–∞—Å—Ç: ${profile.age} –ª–µ—Ç`);
              if (profile.height) parts.push(`–†–æ—Å—Ç: ${profile.height} —Å–º`);
              if (profile.weight) parts.push(`–í–µ—Å: ${profile.weight} –∫–≥`);
            }
            if (parts.length > 0) {
              profileInfo = isEnglish
                ? `\n\nüë§ USER DATA:\n${parts.join('\n')}\n(Use for personalized activity and nutrition recommendations)`
                : `\n\nüë§ –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n${parts.join('\n')}\n(–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–∏—Ç–∞–Ω–∏—é)`;
            }
          }

          const prompt = isEnglish ? `
You are an advanced AI assistant for women's health with deep understanding of the menstrual cycle and overall well-being.

Your task: Create a detailed 30-day wellness prediction (energy balance) based on ALL available data.

üìä CYCLE DATA:
‚Ä¢ Cycle length: ${cycle?.cycle_length || 28} days
‚Ä¢ Menstrual period: ${cycle?.menstrual_length || 5} days
${symptomsContext}${chatContext}${eventsContext}${profileInfo}

‚ö†Ô∏è CRITICAL: Use ALL provided data for predictions:
‚Ä¢ Recent wellness trends, mood, physical symptoms
‚Ä¢ Apple Health data (sleep, stress) if available
‚Ä¢ Health concerns from chat messages
‚Ä¢ Upcoming events and their timing (early morning/late evening events affect energy differently)
‚Ä¢ User's physical parameters (age, weight, height)

üìã TASK:
1. Analyze cycle phase for each of next 30 days
2. Consider recent wellness patterns and trends
3. Account for upcoming events (intense events may require more recovery)
4. Factor in physical symptoms and mood patterns
5. Use Apple Health data if available
6. Provide specific, actionable advice for each day

Return ONLY a JSON array with 30 objects:
[{"day":1,"wellness":65,"note":"Brief personalized recommendation"}]

Wellness scale:
‚Ä¢ Menstruation (days 1-5): 35-55 (low energy, need rest)
‚Ä¢ Follicular (days 6-13): 65-85 (rising energy, good for activity)
‚Ä¢ Ovulation (days 14-16): 80-95 (peak energy, maximum activity)
‚Ä¢ Luteal (days 17+): 50-70 (declining energy, moderate activity)

IMPORTANT: Adjust predictions based on actual health data, not just cycle phase!
` : `
–¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–µ–Ω—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏ –æ–±—â–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è (—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å) –Ω–∞ 30 –¥–Ω–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

üìä –î–ê–ù–ù–´–ï –û –¶–ò–ö–õ–ï:
‚Ä¢ –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: ${cycle?.cycle_length || 28} –¥–Ω–µ–π
‚Ä¢ –î–ª–∏–Ω–∞ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏: ${cycle?.menstrual_length || 5} –¥–Ω–µ–π
${symptomsContext}${chatContext}${eventsContext}${profileInfo}

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –í–°–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:
‚Ä¢ –¢—Ä–µ–Ω–¥—ã —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã
‚Ä¢ –î–∞–Ω–Ω—ã–µ Apple Health (—Å–æ–Ω, —Å—Ç—Ä–µ—Å—Å), –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
‚Ä¢ –ñ–∞–ª–æ–±—ã –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –∏—Ö –≤—Ä–µ–º—è (—Å–æ–±—ã—Ç–∏—è —Ä–∞–Ω–æ —É—Ç—Ä–æ–º/–ø–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º –≤–ª–∏—è—é—Ç –Ω–∞ —ç–Ω–µ—Ä–≥–∏—é –ø–æ-—Ä–∞–∑–Ω–æ–º—É)
‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç)

üìã –ó–ê–î–ê–ù–ò–ï:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–∑—É —Ü–∏–∫–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö 30 –¥–Ω–µ–π
2. –£—á—Ç–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –∏ —Ç—Ä–µ–Ω–¥—ã
3. –£—á—Ç–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
4. –£—á—Ç–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
5. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ Apple Health, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
6. –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å 30 –æ–±—ä–µ–∫—Ç–∞–º–∏:
[{"day":1,"wellness":65,"note":"–ö—Ä–∞—Ç–∫–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"}]

–®–∫–∞–ª–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è:
‚Ä¢ –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è (–¥–Ω–∏ 1-5): 35-55 (–Ω–∏–∑–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è, –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö)
‚Ä¢ –§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è (–¥–Ω–∏ 6-13): 65-85 (—Ä–æ—Å—Ç —ç–Ω–µ—Ä–≥–∏–∏, —Ö–æ—Ä–æ—à–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
‚Ä¢ –û–≤—É–ª—è—Ü–∏—è (–¥–Ω–∏ 14-16): 80-95 (–ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
‚Ä¢ –õ—é—Ç–µ–∏–Ω–æ–≤–∞—è (–¥–Ω–∏ 17+): 50-70 (—Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, —É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)

–í–ê–ñ–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞!
`;

          const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${openaiApiKey}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              model: 'gpt-4o-mini',
              messages: [
                { 
                  role: 'system', 
                  content: isEnglish 
                    ? 'You are an advanced AI assistant for women\'s health. Analyze ALL provided data (cycle, symptoms, mood, events, Apple Health data, chat messages) and return ONLY a valid JSON array with personalized wellness predictions. Be thorough and consider all context.'
                    : '–¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–µ–Ω—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ü–∏–∫–ª, —Å–∏–º–ø—Ç–æ–º—ã, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å–æ–±—ã—Ç–∏—è, –¥–∞–Ω–Ω—ã–µ Apple Health, —Å–æ–æ–±—â–µ–Ω–∏—è) –∏ –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –º–∞—Å—Å–∏–≤ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º. –ë—É–¥—å —Ç—â–∞—Ç–µ–ª—å–Ω—ã–º –∏ —É—á–∏—Ç—ã–≤–∞–π –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.'
                },
                { role: 'user', content: prompt }
              ],
              temperature: 0.7,
              max_tokens: 2500,
            }),
          });

          if (response.ok) {
            const aiData = await response.json();
            const content = aiData.choices[0].message.content.trim();
            const jsonContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
            const aiPredictions = JSON.parse(jsonContent);
            
            // Save enhanced predictions to cache
            console.log('AI predictions generated:', aiPredictions.length);
            
            const today = new Date().toISOString().split('T')[0];
            await supabase
              .from('wellness_predictions')
              .upsert({
                user_id: user.id,
                prediction_date: today,
                predictions: aiPredictions
              }, {
                onConflict: 'user_id,prediction_date'
              });
            
            console.log('AI predictions saved to cache');
          }
        } catch (error) {
          console.error('Background AI enhancement failed:', error);
        }
      };

      // Start background task but don't wait
      enhanceInBackground().catch(console.error);
    }

    return new Response(
      JSON.stringify({ predictions: baselinePredictions }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Error in predict-wellness:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
