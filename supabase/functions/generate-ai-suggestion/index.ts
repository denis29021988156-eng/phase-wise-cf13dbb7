import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
const getCyclePhase = (cycleDay: number, cycleLength: number = 28, menstrualLength: number = 5, language: string = 'ru') => {
  const isEnglish = language === 'en';
  
  if (cycleDay >= 1 && cycleDay <= menstrualLength) {
    return {
      phase: isEnglish ? 'Menstruation' : '–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è',
      description: isEnglish 
        ? 'reduced energy, need for rest, possible pain, emotional sensitivity'
        : '—Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥—ã—Ö–µ, –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–æ–ª–µ–≤—ã–µ –æ—â—É—â–µ–Ω–∏—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    };
  } else if (cycleDay >= menstrualLength + 1 && cycleDay <= 13) {
    return {
      phase: isEnglish ? 'Follicular Phase' : '–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞',
      description: isEnglish
        ? 'increased energy, improved mood, activity, good concentration'
        : '–ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ö–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'
    };
  } else if (cycleDay >= 14 && cycleDay <= 16) {
    return {
      phase: isEnglish ? 'Ovulation' : '–û–≤—É–ª—è—Ü–∏—è',
      description: isEnglish
        ? 'peak energy, social activity, increased attractiveness, possible pulling pain'
        : '–ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω—ã —Ç—è–Ω—É—â–∏–µ –±–æ–ª–∏'
    };
  } else {
    return {
      phase: isEnglish ? 'Luteal Phase' : '–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞',
      description: isEnglish
        ? 'gradual decrease in energy, possible irritability, need for comfort, appetite changes'
        : '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –≤–æ–∑–º–æ–∂–Ω–∞—è —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–æ–º—Ñ–æ—Ä—Ç–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–ø–ø–µ—Ç–∏—Ç–∞'
    };
  }
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!openAIApiKey) {
      throw new Error('OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    const { event, cycleData, timezone = 'UTC', healthDataSynced = false } = await req.json();
    const language = cycleData.language || 'ru';
    const isEnglish = language === 'en';

    console.log('Generating AI suggestion for event:', event.title);
    console.log('Cycle data:', cycleData);
    console.log('Health data synced from Apple Health:', healthDataSynced);

    // Get user from auth
    const { data: { user } } = await supabaseClient.auth.getUser();
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    }

    // Get user profile for name and physical parameters
    const { data: profile } = await supabaseClient
      .from('user_profiles')
      .select('*')
      .eq('user_id', user.id)
      .maybeSingle();

    // Build profile context
    let profileContext = '';
    if (profile) {
      const profileParts = [];
      if (isEnglish) {
        if (profile.age) profileParts.push(`Age: ${profile.age} years`);
        if (profile.height) profileParts.push(`Height: ${profile.height} cm`);
        if (profile.weight) profileParts.push(`Weight: ${profile.weight} kg`);
      } else {
        if (profile.age) profileParts.push(`–í–æ–∑—Ä–∞—Å—Ç: ${profile.age} –ª–µ—Ç`);
        if (profile.height) profileParts.push(`–†–æ—Å—Ç: ${profile.height} —Å–º`);
        if (profile.weight) profileParts.push(`–í–µ—Å: ${profile.weight} –∫–≥`);
      }
      
      if (profileParts.length > 0) {
        profileContext = isEnglish 
          ? `\n\nUser data:\n${profileParts.join('\n')}\n(Use for personalized activity and nutrition advice)`
          : `\n\n–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n${profileParts.join('\n')}\n(–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–∏—Ç–∞–Ω–∏—é)`;
      }
    }

    // Get today's symptom log
    const today = new Date().toISOString().split('T')[0];
    const { data: todaySymptoms } = await supabaseClient
      .from('symptom_logs')
      .select('*')
      .eq('user_id', user.id)
      .eq('date', today)
      .maybeSingle();

    // Get recent chat history to understand user's health context (last 10 messages)
    const { data: recentMessages } = await supabaseClient
      .from('chat_messages')
      .select('content, created_at')
      .eq('user_id', user.id)
      .eq('role', 'user')
      .order('created_at', { ascending: false })
      .limit(10);

    // Build health context from symptoms and recent messages
    let healthContext = '';
    
    // Add symptom data if available
    if (todaySymptoms) {
      const moodLabels: Record<string, Record<string, string>> = {
        en: {
          happy: 'joy', calm: 'calmness', anxious: 'anxiety',
          irritable: 'irritation', sad: 'sadness', motivated: 'motivation'
        },
        ru: {
          happy: '—Ä–∞–¥–æ—Å—Ç—å', calm: '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', anxious: '—Ç—Ä–µ–≤–æ–≥–∞',
          irritable: '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', sad: '–≥—Ä—É—Å—Ç—å', motivated: '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ'
        }
      };
      const physicalLabels: Record<string, Record<string, string>> = {
        en: {
          pain: 'pain', fatigue: 'fatigue', energy: 'energy',
          cramps: 'cramps', headache: 'headache', bloating: 'bloating'
        },
        ru: {
          pain: '–±–æ–ª—å', fatigue: '—É—Å—Ç–∞–ª–æ—Å—Ç—å', energy: '–±–æ–¥—Ä–æ—Å—Ç—å',
          cramps: '—Å–ø–∞–∑–º—ã', headache: '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', bloating: '–≤–∑–¥—É—Ç–∏–µ'
        }
      };
      
      const lang = isEnglish ? 'en' : 'ru';
      
      healthContext += isEnglish 
        ? '\nüìä TODAY\'S WELL-BEING DATA'
        : '\nüìä –î–ê–ù–ù–´–ï –û –°–ê–ú–û–ß–£–í–°–¢–í–ò–ò –°–ï–ì–û–î–ù–Ø';
      if (healthDataSynced) {
        healthContext += isEnglish 
          ? ' (üçé synced with Apple Health)'
          : ' (üçé —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å Apple Health)';
      }
      healthContext += ':\n';
      healthContext += isEnglish
        ? `- Well-being index: ${todaySymptoms.wellness_index}/100\n`
        : `- –ò–Ω–¥–µ–∫—Å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è: ${todaySymptoms.wellness_index}/100\n`;
      healthContext += isEnglish
        ? `- Energy: ${todaySymptoms.energy}/5\n`
        : `- –≠–Ω–µ—Ä–≥–∏—è: ${todaySymptoms.energy}/5\n`;
      
      if (todaySymptoms.sleep_quality) {
        healthContext += isEnglish
          ? `- Sleep quality: ${todaySymptoms.sleep_quality}/5`
          : `- –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: ${todaySymptoms.sleep_quality}/5`;
        if (healthDataSynced) {
          healthContext += isEnglish ? ' (from Apple Health)' : ' (–∏–∑ Apple Health)';
        }
        healthContext += '\n';
      }
      
      if (todaySymptoms.stress_level) {
        healthContext += isEnglish
          ? `- Stress level: ${todaySymptoms.stress_level}/5`
          : `- –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${todaySymptoms.stress_level}/5`;
        if (healthDataSynced) {
          healthContext += isEnglish 
            ? ' (calculated from HRV Apple Health)'
            : ' (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∏–∑ HRV Apple Health)';
        }
        healthContext += '\n';
      }
      
      if (todaySymptoms.mood && todaySymptoms.mood.length > 0) {
        healthContext += isEnglish
          ? `- Mood: ${todaySymptoms.mood.map((m: string) => moodLabels[lang][m] || m).join(', ')}\n`
          : `- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${todaySymptoms.mood.map((m: string) => moodLabels[lang][m] || m).join(', ')}\n`;
      }
      
      if (todaySymptoms.physical_symptoms && todaySymptoms.physical_symptoms.length > 0) {
        healthContext += isEnglish
          ? `- Physical symptoms: ${todaySymptoms.physical_symptoms.map((s: string) => physicalLabels[lang][s] || s).join(', ')}\n`
          : `- –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã: ${todaySymptoms.physical_symptoms.map((s: string) => physicalLabels[lang][s] || s).join(', ')}\n`;
      }
      
      if (healthDataSynced) {
        healthContext += isEnglish
          ? '\n‚ö†Ô∏è IMPORTANT: Sleep and stress data obtained from Apple Health - these are objective health indicators that MUST be considered in recommendations!\n'
          : '\n‚ö†Ô∏è –í–ê–ñ–ù–û: –î–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ –∏ —Å—Ç—Ä–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Apple Health - —ç—Ç–æ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è, –∫–æ—Ç–æ—Ä—ã–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö!\n';
      }
      
      healthContext += '\n';
    }
    
    // Add chat context
    if (recentMessages && recentMessages.length > 0) {
      const healthKeywords = isEnglish
        ? ['sick', 'hurts', 'tired', 'bad', 'pain', 'unwell', 'headache', 'back', 'stomach', 'nausea', 'weakness']
        : ['–±–æ–ª–µ—é', '–±–æ–ª–∏—Ç', '—É—Å—Ç–∞–ª–∞', '–ø–ª–æ—Ö–æ', '–±–æ–ª—å–Ω–æ', '–Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ', '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', '—Å–ø–∏–Ω–∞', '–∂–∏–≤–æ—Ç', '—Ç–æ—à–Ω–∏—Ç', '—Å–ª–∞–±–æ—Å—Ç—å'];
      const relevantMessages = recentMessages.filter(msg => 
        healthKeywords.some(keyword => msg.content.toLowerCase().includes(keyword))
      );
      
      if (relevantMessages.length > 0) {
        healthContext += isEnglish
          ? `üí¨ Context from recent messages:\n${relevantMessages.map(msg => `- ${msg.content}`).join('\n')}\n`
          : `üí¨ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n${relevantMessages.map(msg => `- ${msg.content}`).join('\n')}\n`;
      }
    }

    const { phase, description } = getCyclePhase(cycleData.cycleDay, cycleData.cycleLength, cycleData.menstrualLength || 5, language);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑ ISO
    const eventTime = event.start_time_local || new Date(event.start_time).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      timeZone: timezone
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const eventDate = new Date(event.start_time);
    const eventHour = eventDate.getHours();
    let timeOfDayContext = '';
    
    if (eventHour >= 5 && eventHour < 7) {
      timeOfDayContext = isEnglish 
        ? ' (very early morning - important to consider that the body may not be ready for activity)'
        : ' (–æ—á–µ–Ω—å —Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ - –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å, —á—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–º –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)';
    } else if (eventHour >= 7 && eventHour < 9) {
      timeOfDayContext = isEnglish ? ' (early morning)' : ' (—Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ)';
    } else if (eventHour >= 22 || eventHour < 5) {
      timeOfDayContext = isEnglish
        ? ' (late evening/night - important to consider impact on sleep and recovery)'
        : ' (–ø–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä/–Ω–æ—á—å - –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–æ–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)';
    } else if (eventHour >= 20 && eventHour < 22) {
      timeOfDayContext = isEnglish ? ' (evening)' : ' (–≤–µ—á–µ—Ä)';
    }

    const userName = profile?.name ? profile.name : '';

    const prompt = isEnglish ? `
Evaluate the planned event considering the user's current menstrual cycle phase and well-being, then provide your recommendations.

Context:
‚Ä¢ Cycle day: ${cycleData.cycleDay} (${phase})
‚Ä¢ Characteristics: ${description}
‚Ä¢ Event: ¬´${event.title}¬ª
‚Ä¢ Event time: ${eventTime}${timeOfDayContext}
${healthContext ? '‚Ä¢ Additional well-being information: ' + healthContext + '' : ''}
${profileContext}

IMPORTANT: Your response should be BRIEF - maximum 3-4 sentences (20-25% shorter than usual format).

Task: Write a brief but informative assessment of this event for the user, considering their cycle, condition AND EVENT TIME. The response should:
‚Ä¢ Briefly describe how the current cycle phase affects energy and well-being
‚Ä¢ MUST consider the event timing (if it's early morning or late evening - give specific recommendations!)
‚Ä¢ Provide 1-2 practical tips for event preparation
‚Ä¢ If well-being data is available, consider it in the response

CRITICAL: VARY YOUR OPENING! Use different phrases each time. Examples:
‚Ä¢ "Let's look at this event..."
‚Ä¢ "Interesting event! Here's what matters..."
‚Ä¢ "About this event..."
‚Ä¢ "A few important points..."
‚Ä¢ "What you need to know..."
${userName ? `‚Ä¢ "${userName}, here's my take..."
‚Ä¢ "${userName}, this event..."` : ''}

Don't repeat the same opening phrase! Be creative and diverse.

Reference on cycle phases:
‚Ä¢ Days 1‚Äì5 ‚Äì Menstruation: reduced energy, fatigue, need for rest
‚Ä¢ Days 6‚Äì13 ‚Äì Follicular phase: increased energy, improved mood and concentration
‚Ä¢ Days 14‚Äì16 ‚Äì Ovulation: peak energy and endurance, high activity
‚Ä¢ Days 17+ ‚Äì Luteal phase: decreased energy, possible irritability

REMEMBER: Response should be very brief (3-4 sentences) and must consider event timing!
` : `
–û—Ü–µ–Ω–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü—ã –∏ –µ—ë —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
‚Ä¢ –î–µ–Ω—å —Ü–∏–∫–ª–∞: ${cycleData.cycleDay}-–π (${phase})
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${description}
‚Ä¢ –°–æ–±—ã—Ç–∏–µ: ¬´${event.title}¬ª
‚Ä¢ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: ${eventTime}${timeOfDayContext}
${healthContext ? '‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏: ' + healthContext + '' : ''}
${profileContext}

–í–ê–ñ–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ö–†–ê–¢–ö–ò–ú - –º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–Ω–∞ 20-25% –∫–æ—Ä–æ—á–µ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞). 

–ó–∞–¥–∞–Ω–∏–µ: –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫—É—é, –Ω–æ —ë–º–∫—É—é –æ—Ü–µ–Ω–∫—É —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —É—á–∏—Ç—ã–≤–∞—è —Ü–∏–∫–ª, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò –í–†–ï–ú–Ø –°–û–ë–´–¢–ò–Ø. –í –æ—Ç–≤–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –Ω–∞ —ç–Ω–µ—Ä–≥–∏—é –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
‚Ä¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–µ—Å—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä - –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º —ç—Ç–æ–≥–æ!)
‚Ä¢ –î–∞—Ç—å 1-2 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–±—ã—Ç–∏—é
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏, —É—á–µ—Å—Ç—å –µ—ë –ø—Ä–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –†–ê–ó–ù–û–û–ë–†–ê–ó–¨ –ù–ê–ß–ê–õ–û! –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑. –ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ..."
‚Ä¢ "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! –í–æ—Ç —á—Ç–æ –≤–∞–∂–Ω–æ..."
‚Ä¢ "–ü–æ –ø–æ–≤–æ–¥—É —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è..."
‚Ä¢ "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç–æ–≤..."
‚Ä¢ "–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º..."
‚Ä¢ "–í–æ—Ç –º–æ—è –æ—Ü–µ–Ω–∫–∞..."
‚Ä¢ "–†–∞–∑–±–µ—Ä—ë–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ..."
${userName ? `‚Ä¢ "${userName}, –≤–æ—Ç —á—Ç–æ –≤–∞–∂–Ω–æ..."
‚Ä¢ "${userName}, —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ..."` : ''}

–ù–ï –ü–û–í–¢–û–†–Ø–ô –æ–¥–Ω—É –∏ —Ç—É –∂–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É! –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π.

–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–∞–∑–∞–º —Ü–∏–∫–ª–∞:
‚Ä¢ –î–Ω–∏ 1‚Äì5 ‚Äì –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: —Å–Ω–∏–∂–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è, —É—Å—Ç–∞–ª–æ—Å—Ç—å, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥—ã—Ö–µ
‚Ä¢ –î–Ω–∏ 6‚Äì13 ‚Äì –§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞: –ø–æ–¥—ä—ë–º —ç–Ω–µ—Ä–≥–∏–∏, —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –î–Ω–∏ 14‚Äì16 ‚Äì –û–≤—É–ª—è—Ü–∏—è: –ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –î–Ω–∏ 17+ ‚Äì –õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞: —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –≤–æ–∑–º–æ–∂–Ω–∞ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

–ü–û–ú–ù–ò: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–º (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è!
`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { 
            role: 'system', 
            content: isEnglish 
              ? 'You are an advanced and caring virtual assistant for women\'s health with deep understanding of the menstrual cycle and women\'s overall well-being. Your main goal is to provide competent, BRIEF and personalized recommendations based on the current cycle phase and the user\'s condition. Respond in English, using a simple and clear style. The tone should be friendly, caring and supportive. IMPORTANT: your responses should be short - maximum 3-4 sentences, but informative and useful. CRITICAL: Vary your opening phrases! Never repeat the same beginning twice in a row.'
              : '–¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–µ–Ω—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏ –æ–±—â–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –∂–µ–Ω—â–∏–Ω. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–µ, –ö–†–ê–¢–ö–ò–ï –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü—ã. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è. –¢–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, —É—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º. –í–ê–ñ–ù–û: —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ - –º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–∞—Ä—å–∏—Ä—É–π –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã! –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –Ω–∞—á–∞–ª–æ –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥.'
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.9,
        max_tokens: 500
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('OpenAI API error:', errorData);
      throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    const suggestion = data.choices[0].message.content;
    const justification = isEnglish 
      ? `AI advice for ${phase.toLowerCase()} (cycle day ${cycleData.cycleDay})`
      : `–ò–ò-—Å–æ–≤–µ—Ç –¥–ª—è ${phase.toLowerCase()} (${cycleData.cycleDay} –¥–µ–Ω—å —Ü–∏–∫–ª–∞)`;

    console.log('Generated AI suggestion:', suggestion);

    return new Response(
      JSON.stringify({ 
        suggestion, 
        justification,
        cycleDay: cycleData.cycleDay,
        cycleLength: cycleData.cycleLength,
        phase: phase
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error in generate-ai-suggestion function:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});