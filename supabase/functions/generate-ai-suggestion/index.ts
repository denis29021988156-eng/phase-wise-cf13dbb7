import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
const getCyclePhase = (cycleDay: number, cycleLength: number = 28, menstrualLength: number = 5) => {
  if (cycleDay >= 1 && cycleDay <= menstrualLength) {
    return {
      phase: '–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è',
      description: '—Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥—ã—Ö–µ, –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–æ–ª–µ–≤—ã–µ –æ—â—É—â–µ–Ω–∏—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    };
  } else if (cycleDay >= menstrualLength + 1 && cycleDay <= 13) {
    return {
      phase: '–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞',
      description: '–ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ö–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'
    };
  } else if (cycleDay >= 14 && cycleDay <= 16) {
    return {
      phase: '–û–≤—É–ª—è—Ü–∏—è',
      description: '–ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω—ã —Ç—è–Ω—É—â–∏–µ –±–æ–ª–∏'
    };
  } else {
    return {
      phase: '–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞',
      description: '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –≤–æ–∑–º–æ–∂–Ω–∞—è —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–æ–º—Ñ–æ—Ä—Ç–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–ø–ø–µ—Ç–∏—Ç–∞'
    };
  }
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!openAIApiKey) {
      throw new Error('OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    const { event, cycleData, timezone = 'UTC' } = await req.json();

    console.log('Generating AI suggestion for event:', event.title);
    console.log('Cycle data:', cycleData);

    // Get user from auth
    const { data: { user } } = await supabaseClient.auth.getUser();
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    }

    // Get user profile for name
    const { data: profile } = await supabaseClient
      .from('user_profiles')
      .select('*')
      .eq('user_id', user.id)
      .maybeSingle();

    // Get today's symptom log
    const today = new Date().toISOString().split('T')[0];
    const { data: todaySymptoms } = await supabaseClient
      .from('symptom_logs')
      .select('*')
      .eq('user_id', user.id)
      .eq('date', today)
      .maybeSingle();

    // Get recent chat history to understand user's health context (last 10 messages)
    const { data: recentMessages } = await supabaseClient
      .from('chat_messages')
      .select('content, created_at')
      .eq('user_id', user.id)
      .eq('role', 'user')
      .order('created_at', { ascending: false })
      .limit(10);

    // Build health context from symptoms and recent messages
    let healthContext = '';
    
    // Add symptom data if available
    if (todaySymptoms) {
      const moodLabels: Record<string, string> = {
        happy: '—Ä–∞–¥–æ—Å—Ç—å', calm: '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', anxious: '—Ç—Ä–µ–≤–æ–≥–∞',
        irritable: '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', sad: '–≥—Ä—É—Å—Ç—å', motivated: '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ'
      };
      const physicalLabels: Record<string, string> = {
        pain: '–±–æ–ª—å', fatigue: '—É—Å—Ç–∞–ª–æ—Å—Ç—å', energy: '–±–æ–¥—Ä–æ—Å—Ç—å',
        cramps: '—Å–ø–∞–∑–º—ã', headache: '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', bloating: '–≤–∑–¥—É—Ç–∏–µ'
      };
      
      healthContext += '\nüìä –î–ê–ù–ù–´–ï –û –°–ê–ú–û–ß–£–í–°–¢–í–ò–ò –°–ï–ì–û–î–ù–Ø:\n';
      healthContext += `- –ò–Ω–¥–µ–∫—Å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è: ${todaySymptoms.wellness_index}/100\n`;
      healthContext += `- –≠–Ω–µ—Ä–≥–∏—è: ${todaySymptoms.energy}/5\n`;
      healthContext += `- –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: ${todaySymptoms.sleep_quality}/5\n`;
      healthContext += `- –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${todaySymptoms.stress_level}/5\n`;
      
      if (todaySymptoms.mood && todaySymptoms.mood.length > 0) {
        healthContext += `- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${todaySymptoms.mood.map((m: string) => moodLabels[m] || m).join(', ')}\n`;
      }
      
      if (todaySymptoms.physical_symptoms && todaySymptoms.physical_symptoms.length > 0) {
        healthContext += `- –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã: ${todaySymptoms.physical_symptoms.map((s: string) => physicalLabels[s] || s).join(', ')}\n`;
      }
      healthContext += '\n';
    }
    
    // Add chat context
    if (recentMessages && recentMessages.length > 0) {
      const healthKeywords = ['–±–æ–ª–µ—é', '–±–æ–ª–∏—Ç', '—É—Å—Ç–∞–ª–∞', '–ø–ª–æ—Ö–æ', '–±–æ–ª—å–Ω–æ', '–Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ', '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', '—Å–ø–∏–Ω–∞', '–∂–∏–≤–æ—Ç', '—Ç–æ—à–Ω–∏—Ç', '—Å–ª–∞–±–æ—Å—Ç—å'];
      const relevantMessages = recentMessages.filter(msg => 
        healthKeywords.some(keyword => msg.content.toLowerCase().includes(keyword))
      );
      
      if (relevantMessages.length > 0) {
        healthContext += `üí¨ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n${relevantMessages.map(msg => `- ${msg.content}`).join('\n')}\n`;
      }
    }

    const { phase, description } = getCyclePhase(cycleData.cycleDay, cycleData.cycleLength, cycleData.menstrualLength || 5);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑ ISO
    const eventTime = event.start_time_local || new Date(event.start_time).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      timeZone: timezone
    });

    const userName = profile?.name ? profile.name : '–¥–æ—Ä–æ–≥–∞—è';

    const prompt = `
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–µ–Ω—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é. –û—Ü–µ–Ω–∏ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–µ—Ç–æ–º —Ü–∏–∫–ª–∞ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- ${cycleData.cycleDay}-–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞ (${phase})
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${description}
- –°–æ–±—ã—Ç–∏–µ: ¬´${event.title}¬ª
- –í—Ä–µ–º—è: ${eventTime}${healthContext}

${todaySymptoms ? `
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ –°–ï–ì–û–î–ù–Ø!
- –ò–Ω–¥–µ–∫—Å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è: ${todaySymptoms.wellness_index}/100 ${todaySymptoms.wellness_index < 40 ? '(–ù–ò–ó–ö–ò–ô - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥—ã—Ö!)' : todaySymptoms.wellness_index < 70 ? '(—Å—Ä–µ–¥–Ω–∏–π)' : '(—Ö–æ—Ä–æ—à–∏–π)'}
- –≠–Ω–µ—Ä–≥–∏—è: ${todaySymptoms.energy}/5
- –°—Ç—Ä–µ—Å—Å: ${todaySymptoms.stress_level}/5

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–∏—Ç—ã–≤–∞–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö! –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–∏–∑–∫–∏–π –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å –≤—ã—Å–æ–∫–∏–π - —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ—Ç–¥—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å–æ–±—ã—Ç–∏—è.
` : ''}

–ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –æ—Ü–µ–Ω–∫—É –¥–ª—è ${userName} (4-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π): –≤–ª–∏—è–Ω–∏–µ —Ñ–∞–∑—ã, —ç–Ω–µ—Ä–≥–∏—è, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, —ç–º–æ—Ü–∏–∏, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.

–í–ê–†–ò–ê–ù–¢–´ –ù–ê–ß–ê–õ–ê (–≤–∞—Ä—å–∏—Ä—É–π):
"${userName}, —Å–º–æ—Ç—Ä–∏..." / "–°–ª—É—à–∞–π, ${userName}..." / "–ó–Ω–∞–µ—à—å, ${userName}..." / "${userName}, –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º..." / "${userName}, —Ç—É—Ç –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å..."
`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: '–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 800
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('OpenAI API error:', errorData);
      throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    const suggestion = data.choices[0].message.content;
    const justification = `–ò–ò-—Å–æ–≤–µ—Ç –¥–ª—è ${phase.toLowerCase()} (${cycleData.cycleDay} –¥–µ–Ω—å —Ü–∏–∫–ª–∞)`;

    console.log('Generated AI suggestion:', suggestion);

    return new Response(
      JSON.stringify({ 
        suggestion, 
        justification,
        cycleDay: cycleData.cycleDay,
        cycleLength: cycleData.cycleLength,
        phase: phase
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error in generate-ai-suggestion function:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});