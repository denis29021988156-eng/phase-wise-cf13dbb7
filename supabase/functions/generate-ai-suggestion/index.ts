import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
const getCyclePhase = (cycleDay: number, cycleLength: number = 28, menstrualLength: number = 5) => {
  if (cycleDay >= 1 && cycleDay <= menstrualLength) {
    return {
      phase: '–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è',
      description: '—Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥—ã—Ö–µ, –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–æ–ª–µ–≤—ã–µ –æ—â—É—â–µ–Ω–∏—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    };
  } else if (cycleDay >= menstrualLength + 1 && cycleDay <= 13) {
    return {
      phase: '–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞',
      description: '–ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ö–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'
    };
  } else if (cycleDay >= 14 && cycleDay <= 16) {
    return {
      phase: '–û–≤—É–ª—è—Ü–∏—è',
      description: '–ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω—ã —Ç—è–Ω—É—â–∏–µ –±–æ–ª–∏'
    };
  } else {
    return {
      phase: '–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞',
      description: '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –≤–æ–∑–º–æ–∂–Ω–∞—è —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–æ–º—Ñ–æ—Ä—Ç–µ, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–ø–ø–µ—Ç–∏—Ç–∞'
    };
  }
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!openAIApiKey) {
      throw new Error('OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    const { event, cycleData, timezone = 'UTC' } = await req.json();

    console.log('Generating AI suggestion for event:', event.title);
    console.log('Cycle data:', cycleData);

    // Get user from auth
    const { data: { user } } = await supabaseClient.auth.getUser();
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
    }

    // Get user profile for name and physical parameters
    const { data: profile } = await supabaseClient
      .from('user_profiles')
      .select('*')
      .eq('user_id', user.id)
      .maybeSingle();

    // Build profile context
    let profileContext = '';
    if (profile) {
      const profileParts = [];
      if (profile.age) profileParts.push(`–í–æ–∑—Ä–∞—Å—Ç: ${profile.age} –ª–µ—Ç`);
      if (profile.height) profileParts.push(`–†–æ—Å—Ç: ${profile.height} —Å–º`);
      if (profile.weight) profileParts.push(`–í–µ—Å: ${profile.weight} –∫–≥`);
      
      if (profileParts.length > 0) {
        profileContext = `\n\n–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n${profileParts.join('\n')}\n(–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–∏—Ç–∞–Ω–∏—é)`;
      }
    }

    // Get today's symptom log
    const today = new Date().toISOString().split('T')[0];
    const { data: todaySymptoms } = await supabaseClient
      .from('symptom_logs')
      .select('*')
      .eq('user_id', user.id)
      .eq('date', today)
      .maybeSingle();

    // Get recent chat history to understand user's health context (last 10 messages)
    const { data: recentMessages } = await supabaseClient
      .from('chat_messages')
      .select('content, created_at')
      .eq('user_id', user.id)
      .eq('role', 'user')
      .order('created_at', { ascending: false })
      .limit(10);

    // Build health context from symptoms and recent messages
    let healthContext = '';
    
    // Add symptom data if available
    if (todaySymptoms) {
      const moodLabels: Record<string, string> = {
        happy: '—Ä–∞–¥–æ—Å—Ç—å', calm: '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', anxious: '—Ç—Ä–µ–≤–æ–≥–∞',
        irritable: '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', sad: '–≥—Ä—É—Å—Ç—å', motivated: '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ'
      };
      const physicalLabels: Record<string, string> = {
        pain: '–±–æ–ª—å', fatigue: '—É—Å—Ç–∞–ª–æ—Å—Ç—å', energy: '–±–æ–¥—Ä–æ—Å—Ç—å',
        cramps: '—Å–ø–∞–∑–º—ã', headache: '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', bloating: '–≤–∑–¥—É—Ç–∏–µ'
      };
      
      healthContext += '\nüìä –î–ê–ù–ù–´–ï –û –°–ê–ú–û–ß–£–í–°–¢–í–ò–ò –°–ï–ì–û–î–ù–Ø:\n';
      healthContext += `- –ò–Ω–¥–µ–∫—Å —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è: ${todaySymptoms.wellness_index}/100\n`;
      healthContext += `- –≠–Ω–µ—Ä–≥–∏—è: ${todaySymptoms.energy}/5\n`;
      healthContext += `- –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: ${todaySymptoms.sleep_quality}/5\n`;
      healthContext += `- –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${todaySymptoms.stress_level}/5\n`;
      
      if (todaySymptoms.mood && todaySymptoms.mood.length > 0) {
        healthContext += `- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${todaySymptoms.mood.map((m: string) => moodLabels[m] || m).join(', ')}\n`;
      }
      
      if (todaySymptoms.physical_symptoms && todaySymptoms.physical_symptoms.length > 0) {
        healthContext += `- –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã: ${todaySymptoms.physical_symptoms.map((s: string) => physicalLabels[s] || s).join(', ')}\n`;
      }
      healthContext += '\n';
    }
    
    // Add chat context
    if (recentMessages && recentMessages.length > 0) {
      const healthKeywords = ['–±–æ–ª–µ—é', '–±–æ–ª–∏—Ç', '—É—Å—Ç–∞–ª–∞', '–ø–ª–æ—Ö–æ', '–±–æ–ª—å–Ω–æ', '–Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ', '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', '—Å–ø–∏–Ω–∞', '–∂–∏–≤–æ—Ç', '—Ç–æ—à–Ω–∏—Ç', '—Å–ª–∞–±–æ—Å—Ç—å'];
      const relevantMessages = recentMessages.filter(msg => 
        healthKeywords.some(keyword => msg.content.toLowerCase().includes(keyword))
      );
      
      if (relevantMessages.length > 0) {
        healthContext += `üí¨ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n${relevantMessages.map(msg => `- ${msg.content}`).join('\n')}\n`;
      }
    }

    const { phase, description } = getCyclePhase(cycleData.cycleDay, cycleData.cycleLength, cycleData.menstrualLength || 5);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑ ISO
    const eventTime = event.start_time_local || new Date(event.start_time).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      timeZone: timezone
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    const eventDate = new Date(event.start_time);
    const eventHour = eventDate.getHours();
    let timeOfDayContext = '';
    
    if (eventHour >= 5 && eventHour < 7) {
      timeOfDayContext = ' (–æ—á–µ–Ω—å —Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ - –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å, —á—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–º –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)';
    } else if (eventHour >= 7 && eventHour < 9) {
      timeOfDayContext = ' (—Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ)';
    } else if (eventHour >= 22 || eventHour < 5) {
      timeOfDayContext = ' (–ø–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä/–Ω–æ—á—å - –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–æ–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)';
    } else if (eventHour >= 20 && eventHour < 22) {
      timeOfDayContext = ' (–≤–µ—á–µ—Ä)';
    }

    const userName = profile?.name ? profile.name : '–¥–æ—Ä–æ–≥–∞—è';

    // Build user profile context
    let profileContext = '';
    if (profile?.age || profile?.height || profile?.weight) {
      profileContext = '\nüìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n';
      if (profile.age) profileContext += `‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: ${profile.age} –ª–µ—Ç\n`;
      if (profile.height) profileContext += `‚Ä¢ –†–æ—Å—Ç: ${profile.height} —Å–º\n`;
      if (profile.weight) profileContext += `‚Ä¢ –í–µ—Å: ${profile.weight} –∫–≥\n`;
    }

    const prompt = `
–û—Ü–µ–Ω–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü—ã –∏ –µ—ë —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
‚Ä¢ –î–µ–Ω—å —Ü–∏–∫–ª–∞: ${cycleData.cycleDay}-–π (${phase})
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${description}
‚Ä¢ –°–æ–±—ã—Ç–∏–µ: ¬´${event.title}¬ª
‚Ä¢ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: ${eventTime}${timeOfDayContext}
${healthContext ? '‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏: ' + healthContext + '' : ''}
${profileContext}

–í–ê–ñ–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ö–†–ê–¢–ö–ò–ú - –º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–Ω–∞ 20-25% –∫–æ—Ä–æ—á–µ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞). 

–ó–∞–¥–∞–Ω–∏–µ: –ù–∞–ø–∏—à–∏ –¥–ª—è ${userName} –∫—Ä–∞—Ç–∫—É—é, –Ω–æ —ë–º–∫—É—é –æ—Ü–µ–Ω–∫—É —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —É—á–∏—Ç—ã–≤–∞—è –µ—ë —Ü–∏–∫–ª, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò –í–†–ï–ú–Ø –°–û–ë–´–¢–ò–Ø. –í –æ—Ç–≤–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –Ω–∞ —ç–Ω–µ—Ä–≥–∏—é –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
‚Ä¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–µ—Å—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä - –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º —ç—Ç–æ–≥–æ!)
‚Ä¢ –î–∞—Ç—å 1-2 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–±—ã—Ç–∏—é
‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏, —É—á–µ—Å—Ç—å –µ—ë –ø—Ä–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ

–ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –∫ ${userName} –æ–¥–Ω–æ–π –∏–∑ —Ñ—Ä–∞–∑:
‚Ä¢ "${userName}, —Å–º–æ—Ç—Ä–∏‚Ä¶"
‚Ä¢ "–°–ª—É—à–∞–π, ${userName}‚Ä¶"
‚Ä¢ "–ó–Ω–∞–µ—à—å, ${userName}‚Ä¶"
‚Ä¢ "${userName}, –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º‚Ä¶"

–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–∞–∑–∞–º —Ü–∏–∫–ª–∞:
‚Ä¢ –î–Ω–∏ 1‚Äì5 ‚Äì –ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: —Å–Ω–∏–∂–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è, —É—Å—Ç–∞–ª–æ—Å—Ç—å, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥—ã—Ö–µ
‚Ä¢ –î–Ω–∏ 6‚Äì13 ‚Äì –§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞: –ø–æ–¥—ä—ë–º —ç–Ω–µ—Ä–≥–∏–∏, —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –î–Ω–∏ 14‚Äì16 ‚Äì –û–≤—É–ª—è—Ü–∏—è: –ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏, –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –î–Ω–∏ 17+ ‚Äì –õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞: —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –≤–æ–∑–º–æ–∂–Ω–∞ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

–ü–û–ú–ù–ò: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–º (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è!
`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: '–¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∂–µ–Ω—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏ –æ–±—â–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –∂–µ–Ω—â–∏–Ω. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞–≤–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–µ, –ö–†–ê–¢–ö–ò–ï –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü—ã. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è. –¢–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, —É—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º. –í–ê–ñ–ù–û: —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ - –º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 500
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('OpenAI API error:', errorData);
      throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    const suggestion = data.choices[0].message.content;
    const justification = `–ò–ò-—Å–æ–≤–µ—Ç –¥–ª—è ${phase.toLowerCase()} (${cycleData.cycleDay} –¥–µ–Ω—å —Ü–∏–∫–ª–∞)`;

    console.log('Generated AI suggestion:', suggestion);

    return new Response(
      JSON.stringify({ 
        suggestion, 
        justification,
        cycleDay: cycleData.cycleDay,
        cycleLength: cycleData.cycleLength,
        phase: phase
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error in generate-ai-suggestion function:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});